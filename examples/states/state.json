[
    {
        "name": "CVE-2021-3999",
        "description": "A flaw was found in glibc. An off-by-one buffer overflow and underflow in getcwd() may lead to memory corruption when the size of the buffer is exactly 1. A local attacker who can control the input buffer and size passed to getcwd() in a setuid program could use this flaw to potentially execute arbitrary code and escalate their privileges on the system.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                "getcwd\\(",
                "getcwd\\s*\\(",
                "getcwd\\s*\\(\\s*1\\s*\\)",
                "getcwd\\s*\\(\\s*[^,]+\\s*,\\s*1\\s*\\)"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-4911",
        "description": "A buffer overflow was discovered in the GNU C Library's dynamic loader ld.so while processing the GLIBC_TUNABLES environment variable. This issue could allow a local attacker to use maliciously crafted GLIBC_TUNABLES environment variables when launching binaries with SUID permission to execute code with elevated privileges.",
        "category": "distro",
        "code_analysis": {
            "queries": [],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2022-40674",
        "description": "libexpat before 2.4.9 has a use-after-free in the doContent function in xmlparse.c.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                "doContent\\(",
                "xmlparse\\.c",
                "libexpat\\s+<\\s+2\\.4\\.9",
                "use-after-free",
                "doContent\\s+\\(",
                "xmlparse\\.c:doContent"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2022-43680",
        "description": "In libexpat through 2.4.9, there is a use-after free caused by overeager destruction of a shared DTD in XML_ExternalEntityParserCreate in out-of-memory situations.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                "XML_ExternalEntityParserCreate",
                "libexpat",
                "DTD",
                "out-of-memory",
                "use-after-free",
                "shared DTD",
                "overeager destruction"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2022-4450",
        "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data. If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex() will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack. The functions PEM_read_bio() and PEM_read() are simple wrappers around PEM_read_bio_ex() and therefore these functions are also directly affected. These functions are also called indirectly by a number of other OpenSSL functions including PEM_X509_INFO_read_bio_ex() and SSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if PEM_read_bio_ex() returns a failure code. These locations include the PEM_read_bio_TYPE() functions as well as the decoders introduced in OpenSSL 3.0. The OpenSSL asn1parse command line application is also impacted by this issue.",
        "category": "app",
        "code_analysis": {
            "queries": [
                "PEM_read_bio_ex\\(",
                "PEM_read_bio\\(",
                "PEM_read\\(",
                "PEM_X509_INFO_read_bio_ex\\(",
                "SSL_CTX_use_serverinfo_file\\(",
                "PEM_read_bio_TYPE\\(",
                "asn1parse"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-0215",
        "description": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.\n\n\n\n",
        "category": "app",
        "code_analysis": {
            "queries": [
                "BIO_new_NDEF",
                "BIO_pop",
                "B64_write_ASN1",
                "PEM_write_bio_ASN1_stream",
                "PEM_write_bio_CMS_stream",
                "PEM_write_bio_PKCS7_stream",
                "SMIME_write_ASN1",
                "SMIME_write_CMS",
                "SMIME_write_PKCS7",
                "i2d_ASN1_bio_stream",
                "BIO_new_CMS",
                "BIO_new_PKCS7",
                "i2d_CMS_bio_stream",
                "i2d_PKCS7_bio_stream"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-0286",
        "description": "There is a type confusion vulnerability relating to X.400 address processing inside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but the public structure definition for GENERAL_NAME incorrectly specified the type of the x400Address field as ASN1_TYPE. This field is subsequently interpreted by the OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an ASN1_STRING. When CRL checking is enabled (i.e. the application sets the X509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass arbitrary pointers to a memcmp call, enabling them to read memory contents or enact a denial of service. In most cases, the attack requires the attacker to provide both the certificate chain and CRL, neither of which need to have a valid signature. If the attacker only controls one of these inputs, the other input must already contain an X.400 address as a CRL distribution point, which is uncommon. As such, this vulnerability is most likely to only affect applications which have implemented their own functionality for retrieving CRLs over a network.",
        "category": "app",
        "code_analysis": {
            "queries": [
                "ASN1_STRING",
                "ASN1_TYPE",
                "GENERAL_NAME",
                "GENERAL_NAME_cmp",
                "X509_V_FLAG_CRL_CHECK",
                "X.400",
                "x400Address"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-0464",
        "description": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                "\\-policy",
                "X509_VERIFY_PARAM_set1_policies\\(",
                "X509_VERIFY_PARAM_set1_policies\\s*=",
                "X509_VERIFY_PARAM_set1_policies\\s*\\(",
                "X509_VERIFY_PARAM_set1_policies\\s*\\[",
                "X509_VERIFY_PARAM_set1_policies\\s*\\{",
                "X509_VERIFY_PARAM_set1_policies\\s*\\:"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-21930",
        "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: JSSE).  Supported versions that are affected are Oracle Java SE: 8u361, 8u361-perf, 11.0.18, 17.0.6, 20; Oracle GraalVM Enterprise Edition: 20.3.9, 21.3.5 and  22.3.1. Difficult to exploit vulnerability allows unauthenticated attacker with network access via TLS to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition.  Successful attacks of this vulnerability can result in  unauthorized creation, deletion or modification access to critical data or all Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data as well as  unauthorized access to critical data or complete access to all Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 7.4 (Confidentiality and Integrity impacts).  CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N).",
        "category": "app",
        "code_analysis": {
            "queries": [
                "javax\\.net\\.ssl\\.SSLContext",
                "javax\\.net\\.ssl\\.SSLSocket",
                "javax\\.net\\.ssl\\.SSLSocketFactory",
                "javax\\.net\\.ssl\\.SSLServerSocket",
                "javax\\.net\\.ssl\\.SSLServerSocketFactory",
                "javax\\.net\\.ssl\\.SSLEngine",
                "javax\\.net\\.ssl\\.SSLSession",
                "javax\\.net\\.ssl\\.SSLSessionContext",
                "javax\\.net\\.ssl\\.SSLParameters",
                "javax\\.net\\.ssl\\.SSLSessionBindingListener",
                "javax\\.net\\.ssl\\.SSLSessionBindingEvent",
                "javax\\.net\\.ssl\\.SSLEngineResult",
                "javax\\.net\\.ssl\\.SSLEngineResult\\.HandshakeStatus",
                "javax\\.net\\.ssl\\.SSLEngineResult\\.Status",
                "javax\\.net\\.ssl\\.SSLHandshakeException",
                "javax\\.net\\.ssl\\.SSLKeyException",
                "javax\\.net\\.ssl\\.SSLPeerUnverifiedException",
                "javax\\.net\\.ssl\\.SSLProtocolException",
                "javax\\.net\\.ssl\\.SSLSessionBindingEvent",
                "javax\\.net\\.ssl\\.SSLSessionBindingListener",
                "javax\\.net\\.ssl\\.SSLSessionContext",
                "javax\\.net\\.ssl\\.SSLSession",
                "javax\\.net\\.ssl\\.SSLEngine",
                "javax\\.net\\.ssl\\.SSLParameters",
                "javax\\.net\\.ssl\\.SSLServerSocketFactory",
                "javax\\.net\\.ssl\\.SSLServerSocket",
                "javax\\.net\\.ssl\\.SSLSocketFactory",
                "javax\\.net\\.ssl\\.SSLSocket",
                "javax\\.net\\.ssl\\.SSLContext"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2022-37434",
        "description": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
        "category": "app",
        "code_analysis": {
            "queries": [
                "inflateGetHeader\\(",
                "inflate\\.c",
                "zlib\\.h",
                "zlib\\.c",
                "inflate\\(",
                "inflateInit2\\(",
                "inflateInit_\\(",
                "inflateBackInit_\\(",
                "inflateBack\\(",
                "inflateBackEnd\\(",
                "inflateEnd\\(",
                "inflateSetDictionary\\(",
                "inflateSync\\(",
                "inflateSyncPoint\\(",
                "inflateReset\\(",
                "inflateReset2\\(",
                "inflatePrime\\(",
                "inflateMark\\(",
                "inflateGetDictionary\\(",
                "inflateUndermine\\(",
                "inflateValidate\\(",
                "inflateCopy\\(",
                "inflateResetKeep\\(",
                "inflateBackEnd\\(",
                "inflateCodesUsed\\(",
                "inflate\\(",
                "inflateInit_\\(",
                "inflateInit2_\\(",
                "inflateBackInit_\\(",
                "inflateBack\\(",
                "inflateBackEnd\\(",
                "inflateEnd\\(",
                "inflateSetDictionary\\(",
                "inflateSync\\(",
                "inflateSyncPoint\\(",
                "inflateReset\\(",
                "inflateReset2\\(",
                "inflatePrime\\(",
                "inflateMark\\(",
                "inflateGetDictionary\\(",
                "inflateUndermine\\(",
                "inflateValidate\\(",
                "inflateCopy\\(",
                "inflateResetKeep\\(",
                "inflateBackEnd\\(",
                "inflateCodesUsed\\("
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "GHSA-xpw8-rcwv-8f8p",
        "description": "A client might overload the server by issue frequent RST frames. This can cause a massive amount of load on the remote system and so cause a DDOS attack. \n\n### Impact\nThis is a DDOS attack, any http2 server is affected and so you should update as soon as possible.\n\n### Patches\nThis is patched in version 4.1.100.Final.\n\n### Workarounds\nA user can limit the amount of RST frames that are accepted per connection over a timeframe manually using either an own `Http2FrameListener` implementation or an `ChannelInboundHandler` implementation (depending which http2 API is used).\n\n### References\n- https://www.cve.org/CVERecord?id=CVE-2023-44487\n- https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/\n- https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/",
        "category": "app",
        "code_analysis": {
            "queries": [
                "Http2FrameListener",
                "ChannelInboundHandler",
                "RST_STREAM",
                "RST_FRAME",
                "RST_STREAM_FRAME",
                "RST_FRAME_LIMIT",
                "RST_FRAME_COUNT",
                "RST_FRAME_THRESHOLD",
                "RST_FRAME_RATE",
                "RST_FRAME_LIMITER",
                "RST_FRAME_PROTECTION",
                "RST_FRAME_MITIGATION",
                "RST_FRAME_DOS",
                "RST_FRAME_ATTACK",
                "RST_FRAME_SECURITY",
                "RST_FRAME_VULNERABILITY",
                "RST_FRAME_OVERLOAD",
                "RST_FRAME_FREQUENCY",
                "RST_FRAME_TIMEFRAME",
                "RST_FRAME_CONNECTION"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2022-1471",
        "description": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. 2.0 below versions are affected.",
        "category": "app",
        "code_analysis": {
            "queries": [
                ".*import org.yaml.snakeyaml.constructor.Constructor.*",
                ".*new Constructor.*",
                ".*yaml.load.*"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-34053",
        "description": "In Spring Framework versions 6.0.0 - 6.0.13, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition. Specifically, an application is vulnerable when all of the following are true: * the application uses Spring MVC or Spring WebFlux * io.micrometer:micrometer-core is on the classpath * an ObservationRegistry is configured in the application to record observations. Typically, Spring Boot applications need the org.springframework.boot:spring-boot-actuator dependency to meet all conditions.",
        "category": "app",
        "code_analysis": {
            "queries": [
                ""
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-34054",
        "description": "In Reactor Netty HTTP Server, versions 1.1.x prior to 1.1.13 and versions 1.0.x prior to 1.0.39, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition. Specifically, an application is vulnerable if Reactor Netty HTTP Server built-in integration with Micrometer is enabled.",
        "category": "app",
        "code_analysis": {
            "queries": [
                ".*reactor-netty-http.*micrometer.*",
                ".*reactor-netty-http.*MetricsServer.*",
                ".*reactor-netty.*HttpServer.*micrometer.*",
                ".*reactor-netty.*HttpServer.*MetricsServer.*"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-6246",
        "description": "A heap-based buffer overflow was found in the __vsyslog_internal function of the glibc library. This function is called by the syslog and vsyslog functions. This issue occurs when the openlog function was not called, or called with the ident argument set to NULL, and the program name (the basename of argv[0]) is bigger than 1024 bytes, resulting in an application crash or local privilege escalation. This issue affects glibc 2.36 and newer.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                "./ -r \\(\\bopenlog\\(\\s*NULL\\)\\|\\bopenlog\\(\\)\\)"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2023-6378",
        "description": "A serialization vulnerability in logback receiver component part of logback version 1.4.11 allows an attacker to mount a Denial-Of-Service attack by sending poisoned data.",
        "category": "app",
        "code_analysis": {
            "queries": [
                ".*logback.*1\\.4\\.11.*",
                ".*logback-core-1\\.4\\.11.*",
                ".*Serialization.*logback.*",
                ".*Deserialization.*logback.*"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2024-20918",
        "description": "Vulnerability in the Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Hotspot). Supported versions that are affected are Oracle Java SE: 8u391, 8u391-perf, 11.0.21, 17.0.9, 21.0.1; Oracle GraalVM for JDK: 17.0.9, 21.0.1; Oracle GraalVM Enterprise Edition: 20.3.12, 21.3.8 and 22.3.4. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to critical data or all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data as well as unauthorized access to critical data or complete access to all Oracle Java SE, Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. CVSS 3.1 Base Score 7.4 (Confidentiality and Integrity impacts).",
        "category": "app",
        "code_analysis": {
            "queries": [],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2019-15504",
        "description": "drivers/net/wireless/rsi/rsi_91x_usb.c in the Linux kernel through 5.2.9 has a Double Free via crafted USB device traffic (which may be remote via usbip or usbredir). The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
        "category": "os",
        "code_analysis": {
            "queries": [
                "grep -r --include='\\*.c' 'free\\([^;]*\\);[^}]*free\\([^;]*\\);' drivers/net/wireless/rsi/"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2018-5703",
        "description": "The tcp_v6_syn_recv_sock function in net/ipv6/tcp_ipv6.c in the Linux kernel through 4.14.11 allows attackers to cause a denial of service (slab out-of-bounds write) or possibly have unspecified other impact via vectors involving TLS. The product writes data past the end, or before the beginning, of the intended buffer.",
        "category": "os",
        "code_analysis": {
            "queries": [
                "grep -r --include '\\\tcp_ipv6.c' 'tcp_v6_syn_recv_sock' .",
                "grep -r --include '\\\tcp_ipv6.c' 'TLS' .",
                "grep -r --include '\\\tcp_ipv6.c' 'slab out-of-bounds write' .",
                "grep -r --include '\\\tcp_ipv6.c' 'buffer' .",
                "grep -r --include '\\\tcp_ipv6.c' 'ipv6' .",
                "grep -r --include '\\\tcp_ipv6.c' 'denial of service' ."
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2021-22600",
        "description": "Linux Kernel Use-After-Free Vulnerability: Linux Kernel contains a use-after-free vulnerability in the nft_object, allowing local attackers to escalate privileges.",
        "category": "os",
        "code_analysis": {
            "queries": [
                "grep -r --include='\".[ch]\"' 'nft_object' /path/to/linux/kernel/source/code",
                "grep -r --include='\".[ch]\"' 'nft_put' /path/to/linux/kernel/source/code",
                "grep -r --include='\".[ch]\"' 'nft_release' /path/to/linux/kernel/source/code",
                "grep -r --include='\".[ch]\"' 'kfree' /path/to/linux/kernel/source/code"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2016-8735",
        "description": "Apache Tomcat Remote Code Execution Vulnerability: Apache Tomcat contains an unspecified vulnerability that allows for remote code execution if JmxRemoteLifecycleListener is used and an attacker can reach Java Management Extension (JMX) ports. This CVE exists because this listener wasn't updated for consistency with the Oracle patched issues for CVE-2016-3427 which affected credential types.",
        "category": "app",
        "code_analysis": {
            "queries": [
                "grep -r --include '\\*.xml' 'JmxRemoteLifecycleListener' .",
                "grep -r --include '\\*.java' 'JmxRemoteLifecycleListener' .",
                "grep -r --include '\\*.xml' 'org.apache.catalina.core.JmxRemoteLifecycleListener' .",
                "grep -r --include '\\*.java' 'org.apache.catalina.core.JmxRemoteLifecycleListener' ."
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2021-45046",
        "description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.",
        "category": "app",
        "code_analysis": {
            "queries": [
                ".\\* -r | grep -E '(\\$\\{ctx:.*\\}|%X|%mdc|%MDC)'"
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2024-3094",
        "description": "Malicious code was discovered in the upstream tarballs of xz, starting with version 5.6.0. Through a series of complex obfuscations, the liblzma build process extracts a prebuilt object file from a disguised test file existing in the source code, which is then used to modify specific functions in the liblzma code. This results in a modified liblzma library that can be used by any software linked against this library, intercepting and modifying the data interaction with this library.",
        "category": "distro",
        "code_analysis": {
            "queries": [
                ""
            ],
            "affected_files": []
        },
        "api_spec_analysis": null
    },
    {
        "name": "CVE-2011-3374",
        "description": "It was found that apt-key in apt, all versions, do not correctly validate gpg keys with the master keyring, leading to a potential man-in-the-middle attack.",
        "category": "distro",
        "code_analysis": {
            "queries": [],
            "affected_files": []
        },
        "api_spec_analysis": null
    }
]